Script started on 2021-02-23 20:10:24-0500
]0;tangsiw3@wolf:/h/u16/c8/00/tangsiw3/Desktopwolf:~/Desktop$ gdb overflow
GNU gdb (Ubuntu 8.1.1-0ubuntu1) 8.1.1
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from overflow...done.
(gdb) break main
Breakpoint 1 at 0x742: file overflow.c, line 6.
(gdb) run
Starting program: /h/u16/c8/00/tangsiw3/Desktop/overflow 

Breakpoint 1, main () at overflow.c:6
6	int main() {
(gdb) display a
1: a = {-136430784, 32767, 0, 0}
(gdb) display after
2: after = {1431652912, 21845, 1431651888, 21845}
(gdb) next
7	    int index = 0;
1: a = {-136430784, 32767, 0, 0}
2: after = {1431652912, 21845, 1431651888, 21845}
(gdb) next
9	    int before[SIZE] = {10, 10, 10, 10};
1: a = {-136430784, 32767, 0, 0}
2: after = {1431652912, 21845, 1431651888, 21845}
(gdb) list
4	#define OVERFLOW 5
5	
6	int main() {
7	    int index = 0;
8	    int i;
9	    int before[SIZE] = {10, 10, 10, 10};
10	    int a[SIZE] = {0, 0, 0, 0};
11	    int after[SIZE] = {10, 10, 10, 10};
12	
13	    printf("Address of the variables:\n");
(gdb) list
14	    for (index = 0; index < SIZE; index++) {
15	        printf("%lx -> &after[%d]\n", (unsigned long) &after[index], index);
16	    }
17	    for (index = 0; index < SIZE; index++) {
18	        printf("%lx -> &a[%d]\n", (unsigned long) &a[index], index);
19	    }
20	    for (index = 0; index < SIZE; index++) {
21	        printf("%lx -> &before[%d]\n", (unsigned long) &before[index], index);
22	    }
23	    printf("%lx -> &i\n", (unsigned long)&i);
(gdb) list
24	    printf("%lx -> &index\n", (unsigned long)&index);
25	    printf("\n");
26	
27	
28	    printf("Initial values:\n");
29	    printf("i = %d\n", i);
30	    printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
31	    printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
32	    printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
33	    printf("\n");
(gdb) list
34	
35	
36	    for (i = 0; i < OVERFLOW; i++) {
37	        a[i] = i * 10;
38	        printf("i = %d\n", i);
39	        printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
40	        printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
41	        printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
42	    }
43	
(gdb) break 40[K[K30
Breakpoint 2 at 0x5555555548e9: file overflow.c, line 30.
(gdb) break 36
Breakpoint 3 at 0x555555554959: file overflow.c, line 36.
(gdb) run
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /h/u16/c8/00/tangsiw3/Desktop/overflow 

Breakpoint 1, main () at overflow.c:6
6	int main() {
1: a = {-136430784, 32767, 0, 0}
2: after = {1431652912, 21845, 1431651888, 21845}
(gdb) run
The program being debugged has been started already.
Start it from the beginning? (y or n) m[Kn
Program not restarted.
(gdb) break 36
Note: breakpoint 3 also set at pc 0x555555554959.
Breakpoint 4 at 0x555555554959: file overflow.c, line 36.
(gdb) continue
Continuing.
Address of the variables:
7fffffffe6a0 -> &after[0]
7fffffffe6a4 -> &after[1]
7fffffffe6a8 -> &after[2]
7fffffffe6ac -> &after[3]
7fffffffe690 -> &a[0]
7fffffffe694 -> &a[1]
7fffffffe698 -> &a[2]
7fffffffe69c -> &a[3]
7fffffffe680 -> &before[0]
7fffffffe684 -> &before[1]
7fffffffe688 -> &before[2]
7fffffffe68c -> &before[3]
7fffffffe67c -> &i
7fffffffe678 -> &index

Initial values:
i = 0

Breakpoint 2, main () at overflow.c:30
30	    printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
1: a = {0, 0, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) next
before = {10, 10, 10, 10}
31	    printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
1: a = {0, 0, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) next
a = {0, 0, 0, 0}
32	    printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
1: a = {0, 0, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) next
after = {10, 10, 10, 10}
33	    printf("\n");
1: a = {0, 0, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) next


Breakpoint 3, main () at overflow.c:36
36	    for (i = 0; i < OVERFLOW; i++) {
1: a = {0, 0, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) 
37	        a[i] = i * 10;
1: a = {0, 0, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) 
38	        printf("i = %d\n", i);
1: a = {0, 0, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) 
i = 0
39	        printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
1: a = {0, 0, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) 
before = {10, 10, 10, 10}
40	        printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
1: a = {0, 0, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) 
a = {0, 0, 0, 0}
41	        printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
1: a = {0, 0, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) 
after = {10, 10, 10, 10}
36	    for (i = 0; i < OVERFLOW; i++) {
1: a = {0, 0, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) 
37	        a[i] = i * 10;
1: a = {0, 0, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) 
38	        printf("i = %d\n", i);
1: a = {0, 10, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) 
i = 1
39	        printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
1: a = {0, 10, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) 
before = {10, 10, 10, 10}
40	        printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
1: a = {0, 10, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) 
a = {0, 10, 0, 0}
41	        printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
1: a = {0, 10, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) 
after = {10, 10, 10, 10}
36	    for (i = 0; i < OVERFLOW; i++) {
1: a = {0, 10, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) 
37	        a[i] = i * 10;
1: a = {0, 10, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) 
38	        printf("i = %d\n", i);
1: a = {0, 10, 20, 0}
2: after = {10, 10, 10, 10}
(gdb) 
i = 2
39	        printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
1: a = {0, 10, 20, 0}
2: after = {10, 10, 10, 10}
(gdb) 
before = {10, 10, 10, 10}
40	        printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
1: a = {0, 10, 20, 0}
2: after = {10, 10, 10, 10}
(gdb) 
a = {0, 10, 20, 0}
41	        printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
1: a = {0, 10, 20, 0}
2: after = {10, 10, 10, 10}
(gdb) 
after = {10, 10, 10, 10}
36	    for (i = 0; i < OVERFLOW; i++) {
1: a = {0, 10, 20, 0}
2: after = {10, 10, 10, 10}
(gdb) 
37	        a[i] = i * 10;
1: a = {0, 10, 20, 0}
2: after = {10, 10, 10, 10}
(gdb) 
38	        printf("i = %d\n", i);
1: a = {0, 10, 20, 30}
2: after = {10, 10, 10, 10}
(gdb) 
i = 3
39	        printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
1: a = {0, 10, 20, 30}
2: after = {10, 10, 10, 10}
(gdb) 
before = {10, 10, 10, 10}
40	        printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
1: a = {0, 10, 20, 30}
2: after = {10, 10, 10, 10}
(gdb) 
a = {0, 10, 20, 30}
41	        printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
1: a = {0, 10, 20, 30}
2: after = {10, 10, 10, 10}
(gdb) 
after = {10, 10, 10, 10}
36	    for (i = 0; i < OVERFLOW; i++) {
1: a = {0, 10, 20, 30}
2: after = {10, 10, 10, 10}
(gdb) 
37	        a[i] = i * 10;
1: a = {0, 10, 20, 30}
2: after = {10, 10, 10, 10}
(gdb) 
38	        printf("i = %d\n", i);
1: a = {0, 10, 20, 30}
2: after = {40, 10, 10, 10}
(gdb) print()[C[K[K&()[Kafter[0])
$1 = (int *) 0x7fffffffe6a0
(gdb) print&(after[0])[C[1P[0])[1P[0])[1P[0])[1P[0])[C[C[1P])4])[C[C
$2 = (int *) 0x7fffffffe6a0
(gdb) quit
A debugging session is active.

	Inferior 1 [process 16606] will be killed.

Quit anyway? (y or n) y
]0;tangsiw3@wolf:/h/u16/c8/00/tangsiw3/Desktopwolf:~/Desktop$ exit
exit

Script done on 2021-02-23 20:29:20-0500
